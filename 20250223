# def solution(cap, n, deliveries, pickups):
#     deliveries.revers()
#     pickups.revers()
#     answer = 0
#
#     have_to_deli = 0
#     have_to_pick = 0
#
#     for i in range(n):
#         have_to_deli += deliveries[i]
#         have_to_pick += pickups[i]
#         while have_to_deli > 0 or have_to_pick > 0:
#             have_to_deli -= cap
#             have_to_pick -= cap
#             answer += 2 * (i + 1)
#     return answer

#['LLLL', 'PPPP', 'LLLP', 'PPLP']
# from collections import deque

# # 문자열을 4*4 배열로 변환
# def bit2arr(bit) :
#     arr = []
#     for i in range(4):
#         arr.append(list(bit[i*4:(i+1)*4]))
#     return arr

#
# Q = deque()
# Q.append(startbit)
#
# # 방문처리 dictionary로
# visited = dict()
# visited[startbit] = 0  # count로 활용
# while Q :
#     bit = Q.popleft()
#     board = bit2arr(bit)
#     # 목표값과 비교
#     if bit == targetbit :
#         ans = visited[bit]
#         break
#     # 수평교환
#     for i in range(4) :
#         for j in range(3) :
#             if board[i][j] != board[i][j+1]:
#                 board[i][j] , board[i][j+1] = board[i][j+1] , board[i][j]
#                 # 2차원 배열 -> 문자열
#                 newbit = arr2bit(board)
#                 if not visited.get(newbit) :
#                     visited[newbit] = visited[bit] + 1
#                     Q.append(newbit)
#                 board[i][j] , board[i][j+1] = board[i][j+1] , board[i][j]
#
#     # 수직교환
#     for i in range(3) :
#         for j in range(4) :
#             if board[i][j] != board[i+1][j]:
#                 board[i][j] , board[i+1][j] = board[i+1][j] , board[i][j]
#                 # 2차원 배열 -> 문자열
#                 newbit = arr2bit(board)
#                 if not visited.get(newbit) :
#                     visited[newbit] = visited[bit] + 1
#                     Q.append(newbit)
#                 board[i][j] , board[i+1][j] = board[i+1][j] , board[i][j]
#
# # 출력


from collections import deque
def arr2bit(arr) :
    bit = ''
    for i in range(4):
        for j in range(4) :
            bit += arr[i][j]
    return bit

def bit2arr(bit) :
    arr = []
    for i in range(4):
        arr.append(list(bit[i*4:(i+1)*4]))
    return arr

before = []
while len(before) < 8 :
    tmp = input()
    if not tmp:
        continue
    before.append(list(tmp.strip()))

current = before[:4]
target = before[4:]
conversion = {'L' : '0','P' : '1'}

for i in range(4) :
    for j in range(4) :
        current[i][j] = conversion[current[i][j]]
        target[i][j] = conversion[target[i][j]]
print(current)
print(target)
start = arr2bit(current)  #시작값
target = arr2bit(target)  #목표값

Q = deque()
Q.append(start)
while 
    
# 이 세계게임
