def solution(n, times):
    answer = 0
    low, high = 1, max(times) * n   # 이진탐색을 하기 위해 최소,최대 값을 지정
    while low <= high:              # 최소값이 최대값보다 커지면 탐색 종료
        people = 0
        mid = (high + low) // 2     # 중앙값
        for i in times:
            people += mid // i      # 중앙값(시간) 동안 사람을 얼만큼 심사 시킬 수 있나 계산
        if people >= n:             # 시간동안 사람을 모두 심사했거나 n보다 많이 심사했으면 최대 값을 낮춤
            answer = mid
            high = mid - 1
        else:
            low = mid + 1           # 시간동안 사람을 모두 심사하지 못 했으면 최소값을 높임
    return answer
print(solution(10,[2,3]))

# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30


def solution(n, stations, w):
    answer = 0
    std = w * 2 + 1
    start = 1
    for s in stations:
        if s - w - start > 0:
            answer += (s - w - start)//std
            if (s - w - start)%std: answer += 1
        start = s + w + 1
    if n - start + 1 > 0:def solution(n, times):
    answer = 0
    low, high = 1, max(times) * n   # 이진탐색을 하기 위해 최소,최대 값을 지정
    while low <= high:              # 최소값이 최대값보다 커지면 탐색 종료
        people = 0
        mid = (high + low) // 2     # 중앙값
        for i in times:
            people += mid // i      # 중앙값(시간) 동안 사람을 얼만큼 심사 시킬 수 있나 계산
        if people >= n:             # 시간동안 사람을 모두 심사했거나 n보다 많이 심사했으면 최대 값을 낮춤
            answer = mid
            high = mid - 1
        else:
            low = mid + 1           # 시간동안 사람을 모두 심사하지 못 했으면 최소값을 높임
    return answer
print(solution(10,[2,3]))

# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30


def solution(n, stations, w):
    answer = 0
    std = w * 2 + 1
    start = 1
    for s in stations:


입국심사 설명

        answer += (n - start + 1) // std
        if (n - start + 1)%std: answer += 1
    return answer
