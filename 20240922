# def solution(number, k):
#     stack = []
#     for num in number:
#         while stack and stack[-1] < num and k > 0:
#             k -= 1
#             stack.pop()
#         stack.append(num)
#     if k != 0:
#         stack = stack[:-k]
#     return ''.join(stack)

import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def softmax(x):
    # overflow 방지를 위해 입력에서 최대값을 빼줍니다.
    exp_x = np.exp(x - np.max(x))
    return exp_x / np.sum(exp_x, axis=0)

x = np.array([1.0, 2.0, 3.0])
print('Sigmoid 결과:', softmax(x))

def relu(x):
    return np.maximum(0, x)

x = np.array([-2.0, -1.0, 0.0,1.0, 2.0])

print('ReLU 결과:', relu(x))

def tanh(x):
    return  np.tanh

x = np.array([-2.0, -1.0, 0.0,1.0, 2.0])
print("Tanh 결과:", tanh(x))

def binary_cross_entropy(y_true, y_pred):
    epsilon = 1e-15
    y_pred = np.clip(y_pred, epsilon, 1- epsilon)
    return  -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np. log(1 - y_pred))

y_true = np.array([1,0,1])
y_pred = np.array([0.9, 0.2,0.8])
print("bce 손실", binary_cross_entropy(y_true, y_pred))

def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred)**2)
y_true = np.array([1,0,1])
y_pred = np.array([0.9,0.2,0.8])
print('mse 손실:', mean_squared_error(y_true,y_pred))

def categorical_cross_entropy(y_true, y_pred):
    epsilon = 1e-15
    y_pred = np.clip(y_pred,epsilon,1 - epsilon)
    return -np.sum(y_true * np.log(y_pred)) / y_true.shape[0]
y_true = np.array([[1,0,0], [0,1,0], [0,0,1]])
y_pred = np.array([[0.9,0.05,0.05],[0.1,0.8,0.1], [0.05, 0.1,0.85]])
print('cce 손실:',categorical_cross_entropy(y_true,y_pred))

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD

X = np.array([[0,0], [0,1],[1,0],[1,1]])
y = np.array([[0],[1],[1],[0]])

model = Sequential()
model.add(Dense(8, input_dim=2,activation='sigmoid'))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer=SGD(learning_rate=0.1), metrics=['accuracy'])
model.fit(X,y, epochs=5000, verbose=0)

predictions = model.predict(X)
print('xor 문제 예측 결과:')
for i in range(len(X)):
    print(f"입력: {X[i]} - > 예측 출력: {round(predictions[i][0])}, 실제 출력: {y[i][0]}")
