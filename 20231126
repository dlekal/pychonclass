# def solution(N, stages):
#     answer = []
#
#     # 실패율
#     ratio = {}  # sorting위해 dictionary로 선언
#     # 전체 플레이어 수 > 스테이지 지날수록 줄어든다
#     allPlayer = len(stages)
#
#     for i in range(1, N + 1):
#         if allPlayer == 0:  # 스테이지에 도달한 플레이어 수가 0명일 때
#             ratio[i] = 0
#         else:
#             ratio[i] = stages.count(i) / allPlayer
#             allPlayer -= stages.count(i)  # 현재 스테이지에 멈춘 숫자만큼 제외
#
#     # value 기준으로 정렬 후 key 저장
#     answer = sorted(ratio, key=lambda x: ratio[x], reverse=True)

# def solution(s):
#   answer = []
#   a = {}
#   for i in range(len(s)):
#       if s[i] not in a:
#           answer.append(-1)
#           a[s[i]] = i
#       else:
#           answer.append(i-a[s[i]]) # 마지막으로 나온 글자와 최근에 나온 글자 계산해서 answer에 추가
#           a[s[i]] = i
#   return answer

#"banana"	[-1, -1, -1, 2, 2, 2]

# a = {b,0,a,1,n,2,a,3,n,4,a,5}

def solution(N, stages):
    answer = []
    answer2 = {}
    a = len(stages)
    for i in range(1, N + 1):
        if a == 0:
            answer2[i] = 0
        else:
            answer2[i] = stages.count(i) / a # 실패율
            a -= stages.count(i)
    answer = sorted(answer2, key=lambda x: answer2[x], reverse=True)
    return answer
print(solution(5,[2, 1, 2, 6, 2, 4, 3, 3]))
