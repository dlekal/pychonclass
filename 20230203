# 시퀀스 자료형
# 하나의 변수에 여러 값을 저장할 수 있는 자료형
# 자료형, 튜플, 딕셔너리, 집합(set)


# 리스트 list - 대괄호

# 리스트 생성
# 리스트 이름 = [초기값,...]
# 리스트 안에 다양한 자료형을 가진 값을 넣을 수 있다
# mylist = [5,7,2,1,"ad", 3.1, "a2"]
# print(mylist)


# # 빈 리스트 생성
# test_list = []

#리스트 값 접근
# lst = [3,4,5,6]
# print(lst[1]) # 인덱싱
# print(lst[:3]) # 슬라이싱


# 리스트 값 추가
# append, insert, extend

# lst = [3,4,5]
# print(lst)
#
# lst.append(10) # 값을 리스트의 마지막에 추가한다
# print(lst)

# lst.insert(1,9)
# print(lst) # 두번째 값을 첫번째 값 위에 삽입한다.
# 이때 원래 자리에 있었던 값은 뒤로 밀려난다

# lst = [3,4,5]
# lst.extend([5,0,8]) #시퀀스 자료형 요구
# print(lst) # 두 값이 병합됨

# 리스트 값 수정
# lst = [9,0,2]
# lst[1] = 13
# print(lst)

#리스트 값 삭제
# dle pop remove
lst = [1,2,3,3,3,3,4,5,6,7,8,9]
# del lst[5] # 인덱스로 삭제
# print(lst)
#
# print(lst.pop()) # 리스트의 맨 마지막 값을 추출
# print(lst.pop(2)) # 인덱스로도 추출가능
# print(lst)

# lst.remove(3) # 지정된 값 하나 제거
# print(lst)

# 리스트의 특징
# 여러 값을 저장할 수 있다
# 각 값마다 인덱스를 가진다
# 여러 다른 자료형값을 동시에 저장 할 수 있다

# 튜플 tuple 소괄호

# 튜플의 생성
# tp = (3,7,9)
# # 조건을 만족했을 때 소괄호는 생략이 가능하다
# tp2 = 6,7,2
# tp3 = 10,
# tp4 = (12)
#
# print(type(tp4)) # 정수형으로 인식
# print(type(tp3))

# 튜플의 값 접근
# tp = (2,3,7)
# print(tp[0])
# print(tp[:2])

# 튜플의 값 추가 x
# 튜플의 값 수정 x

# 튜플의 값 삭제?
# 일부 삭제 ㅌ

# 튜플 자체 삭제
# tp = (3,4)
# del tp

# 튜플의 특징
# 생성, 접근, 전체 삭제 이외에
# 추가, 수정, 일부 삭제 불가능

# 딕셔너리 dict 중괄호
# {key값 : value 값}
# dt = {10:"berry", "apple":0, 6:20, "by":"on"}
# print(dt)


# 딕셔너리 값 접근
# dt = {10:"berry", "apple":0, 6:20, "by":"on"}
# 딕셔너리 내부에 존재하는 key값을 넣으면
# 그에 대응하는 value 값이 도출된다
# print(dt[6])
# print(dt["apple"])

# 딕셔너리 값 추가
# dt = {10:"berry", "apple":0, 6:20, "by":"on"}
# dt[67] = "helllo"
# dt["pop"] = "name"
# 해당 딕셔너리 안에 존재하지 않던 key값을 매개로 넣을 경우
# 새로운 key:value로 인식되어 추가되나
# print(dt)

# 딕셔너리 값 수정
# dt = {10:"berry", "apple":0, 6:20, "by":"on"}
# 이미 존재하는 ket값을 넣었을 경울 수정된다
# dt["apple"] = "red"
# print(dt)

# 딕셔너리 값 삭제
# dt = {10:"berry", "apple":0, 6:20, "by":"on"}
# del dt[10] # key값을 넣어 삭제
# print(dt)


# 딕셔너리 전용 함수
# dt = {10:"berry", "apple":0, 6:20, "by":"on"}
# print(dt.keys()) # 딕셔너리의 key값을 전부 가져오는 함수
# print(dt.values()) # 딕셔너리의 value값을 전부 가죠오는 함수


# 딕셔너리의 특징
# key값 : value 값을 한 쌍으로 가진다
# 존재하는 key값을 넣을 경우 그에 대응하는 value 값을 도출
# 존재하지 않는 key값과 value값을 넣을 경우
# 새로운 값으로 인식되어 추가된다


# 집합 set 중괄호

# 집합의 생성
# st = {}
# print(type(st)) # dict 자료형으로 인식됨
# st = {1,32,4,6,2,8,9}
# print(st)
#
# # 집합의 값 추가
#
# st.add(3)
# print(st)
# # 집합의 값 삭제
#
# st.remove(32)
# print(st)

#자료형 형변환
# a = [1,2,3]
# print(tuple(a), type(tuple(a)))
# b = (2,6,7)
# print(list(b), type(list(b)))
# c = {"10":0,"apple" : "red"}
# print(list(c), type(list(c))) # key 값만 리스트로 변환됨
# 
# print(set(a), type(set(a)))
