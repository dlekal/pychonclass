# def solution(dots):
#     answer = 0
#     dots_idx = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 2, 0, 3]]
#     for d1, d2, d3, d4 in dots_idx:
#         x1, y1 = dots[d1][0], dots[d1][1]
#         x2, y2= dots[d2][0], dots[d2][1]
#         x3, y3= dots[d3][0], dots[d3][1]
#         x4, y4= dots[d4][0], dots[d4][1]
#         if (y1-y2)*(x3-x4) == (y3-y4)*(x1-x2) :
#             answer = 1
#     return answer

# import math
#
#
# def solution(denum1, num1, denum2, num2):
#
#     # 1. 두 분수의 합 계산
#
#     a = num1 * num2
#
#     b = denum1 * num2 + denum2 * num1
#     #     1       4       3      2
#     # 2. 최대공약수 계산
#
#     c = math.gcd(a, b)
#
#     # 3. gcd 로 나눈 값을 answer에 담기
#     print(a, b, c)
#     answer = [b // c, a // c]
#
#     return answer
#
# print(solution(1,2,1,4))


# def solution(code):
#     #"abc1abc1abc"	"acbac"
#     mode = 0
#     answer = ''
#     for i in range(len(code)):
#             if code[i] == '1':
#                 mode = 1
#                 if i % 2 != mode:
#                     answer += code[i]
#
#             elif i % 2 == 0:
#                     answer += code[i]
#     if answer == '':
#         return 'EMPTY'
#     return answer

# def solution(code):
#     answer = ''
#     mode = 0
#     for i in range(len(code)):
#         if mode == 0 :
#             if code[i] != '1' and i % 2 == 0:
#                 answer += code[i]
#             elif code[i] == '1':
#                 mode = 1
#         else :
#             if code[i] != '1' and i % 2 == 1 :
#                 answer += code[i]
#             elif code[i] == '1':
#                 mode = 0
#     if answer == '':
#         return 'EMPTY'
#     return answer
# return 1 if answer1 or answer2 or answer3 else 0
# print(solution("abc1abc1abc"))

def solution(dots):
    # [[1,4],[9,2],[3,8],[11,6]]
    [x1, y1], [x2, y2], [x3, y3], [x4, y4] = dots

    if ((dots[0][1]-dots[1][1])*(dots[2][0]-dots[3][0]) == (dots[2][1]-dots[3][1])*(dots[0][0]-dots[1][0])):
        #((y1-y2)*(x3-x4) == (y3-y4)*(x1-x2))
        return 1
    elif ((dots[0][1]-dots[2][1])*(dots[1][0]-dots[3][0]) == (dots[1][1]-dots[3][1])*(dots[0][0]-dots[2][0])):
        #((y1-y3)*(x2-x4) == (y2-y4)*(x1-x3))
        return 1
    elif ((dots[0][1]-dots[3][1])*(dots[1][0]-dots[2][0]) == (dots[1][1]-dots[2][1])*(dots[0][0]-dots[3][0])):
        #((y1-y4)*(x2-x3) == (y2-y3)*(x1-x4))
        return 1
    else:
        return 0
