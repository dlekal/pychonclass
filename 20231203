# def solution(N, stages):
#     answer = []
#     answer2 = {}
#     a = len(stages)
#     for i in range(1, N + 1):
#         if a == 0:
#             answer2[i] = 0
#         else:
#             answer2[i] = stages.count(i) / a # 실패율
#             a -= stages.count(i)
#     answer = sorted(answer2, key=lambda x: answer2[x], reverse=True)
#     return answer
# print(solution(5,[2, 1, 2, 6, 2, 4, 3, 3]))

# 1. 정수를 저장할 변수 n을 만들고 board의 길이를 저장합니다.
# 2. 같은 색으로 색칠된 칸의 개수를 저장할 변수 count를 만들고 0을 저장합니다.
# 3. h와 w의 변화량을 저장할 정수 리스트 dh, dw를 만들고 각각 [0, 1, -1, 0], [1, 0, 0, -1]을 저장합니다.
# 4. 반복문을 이용해 i 값을 0부터 3까지 1 씩 증가시키며 아래 작업을 반복합니다.
#    4-1. 체크할 칸의 h, w 좌표를 나타내는 변수 h_check, w_check를 만들고 각각 h + dh[i], w + dw[i]를 저장합니다.
#    4-2. h_check가 0 이상 n 미만이고 w_check가 0 이상 n 미만이라면 다음을 수행합니다.
#        4-2-a. board[h][w]와 board[h_check][w_check]의 값이 동일하다면 count의 값을 1 증가시킵니다.
# 5. count의 값을 return합니다.

# def solution(board, h, w):
#     n = len(board)
#     count = 0
#     dx = [0, 1, -1, 0]
#     dy = [1, 0, 0, -1]
#     for i in range(len(dx)):
#         x_check = h + dx[i]
#         y_check = w + dy[i]
#         if 0 <= x_check < n and 0 <= y_check < n:
#             if board[x_check][y_check] == board[h][w]:
#                 count += 1
#     return count

# def solution(data, ext, val_ext, sort_by):
#     answer = []
    # 기준 : ext
    # 기준 값 : val_ext
    # 정렬 기준 값 : sort_by
    # data에서 ext 값이 val_ext보다 작은 데이터만 뽑은 후,
    # 정렬 기준 값을 기준으로 오름차순으로 정렬하여 return
#     for i in range(len(data)):
#             a = {'code':data[i][0], 'date':data[i][1], 'maximum':data[i][2], 'remain':data[i][3]}
#             if a[ext] < val_ext:
#                 answer.append(data[i])
#     b = {'code':0, 'date':1, 'maximum':2, 'remain':3}
#     answer.sort(key = lambda x:x[b[sort_by]])
#     return answer
# print(solution([[1, 20300104, 100, 80], [2, 20300804, 847, 37], [3, 20300401, 10, 8]],"date",20300501,"remain"))

# def solution(data, ext, val_ext, sort_by):
#     answer = []
#     a = ['code','date','maximum','remain']
#     for i in data:
#         idx = a.index(ext)
#         if i[idx] < val_ext:
#             answer.append(i)
#     idx = a.index(sort_by)
#     answer.sort(key= lambda x: x[idx])
#     return answer

# def solution(bandage, health, attacks):
#     a = {}
#     for k,v in attacks:
#         a[k] = v
#     m = len(attacks)
#     i = 0 # 초
#     while m:
#         if health < 30:
#             health += bandage[1]
#             i += 1
#             if i == bandage[0]:
#                 health += bandage[2]

# [PCCP 기출문제] 1번 / 붕대 감기
