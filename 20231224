# def solution(park, routes):
#     x, y = 0,0
#     for i in range(len(park)):
#         for j in range(len(park[i])):
#             if park[i][j] == 'S':
#                 x,y = i,j
#     offset = {'N' : [-1,0],'S':[1,0],'E':[0,1], 'W':[0,-1]}
#
#     for route in routes:
#         dir, cnt = route.split()
#         nx,ny = x,y
#         flag = True
#         for _ in range(int(cnt)):
#             nx += offset[dir][0]
#             ny += offset[dir][1]
#             if 0 <= nx < len(park) and 0 <= ny < len(park[nx]) and park[nx][ny] != 'X':
#                 pass
#             else:
#                 flag = False
#                 break
#         if flag:
#             x,y = nx,ny
#
#     return [x,y]
#
# print(solution(["OSO","OOO","OXO","OOO"],	["E 2","S 3","W 1"]))
# def solution(participant, completion):
#     participant.sort()
#     completion.srot()
#     if not completion:
#         return participant[0]
#     while completion:
#         a = participant.pop()
#         b = completion.pop()
#         if a != b:
#             return a
#     if not completion:
#         return participant[0]

# def solution(n, lost, reserve):
#     c = n - len(lost)
#     lost.sort()
#     reserve.sort()
#     a = reserve
#     b = lost
#     for i in range(len(lost)):
#         for j in range(len(reserve)):
#             if b[i] == a[i] + 1 or b[i] == a[j] - 1:
#                 c += 1
#                 del a[i],b[i]
#                 break
#             else:
#                 continue
#     return c
# print(solution(5,[2, 4],[1, 3, 5]))
# def solution(n, lost, reserve):
#     students = [1] * n
#     for i in reserve:
#         students[i-1] += 1
#     for i in lost:
#         students[i-1] -= 1
#
#     for i in range(n):
#         if students[i] == 0:
#             if i > 0 and students[i-1] == 2:
#                 students[i] += 1
#                 students[i-1] -= 1
#             elif i +1 < len(students) and students[i + 1] == 2:
#                 students[i] += 1
#                 students[i + 1] -= 1
#     answer = 0
#     for i in students:
#         if i >= 1:
#             answer += 1
#     return answer

# 숙제 이진  bin 함수 쓰기
