# first(): hidato를 넘겨 받아, 시작하는 수인 1의 위치를 담은 튜플을 리턴하는 함수이다. 
# 결과값의 형태는 (𝑟, 𝑐) r:행, c: 열
def first():
    return

# successor(): 후속자를 찾는 함수, hidato와 현재 보고 있는 후속자의 행의 위치인 r과 열의 위치인 c를 넘겨 받아
# 해당 위치에 있는 수의 후속자를 찾아 그 위치를 담은 튜플을 반환하는 함수. 결과값의 형태는 (r,c) r: 행, c: 열
# 후속자는 현재 위치한 수에 8방향으로 1칸 내에 위치한 값이어야 하며 현재 값 보다 1더 큰 수를 의미한다. 만약 후속자를 
# 찾지 못한 경우 (None, None)를 반환하라
def successor():
    return


# last(): hidato를 넘겨받아 후속자를 찾는 행위를 진행하고 마지막으로 멈춘 위치를 튜플에 담아 반환하라.
def last():
    return

# hidato(): Hidato를 넘겨 받아 후속자를 찾는 행위를 진행하였을 때, 1에서 시작하여 마지막으로 도달한 위치의 값이 
# 총 셀 개수(행X열)과 같다면 True, 아니라면 False를 리턴하는 함수
def hidato():
    return
# print(first([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]]))
# (2, 3)
# print(first([[8, 14, 13, 12], [15, 1, 2, 11], [5, 3, 10, 16], [4, 6, 7, 9]]))
# (1, 1)
# print(first(((18, 19, 20, 4, 5), (17, 1, 3, 6, 8), (16, 13, 2, 9, 7), (14, 15, 12, 11, 10))))
# (1, 1)
# print(successor([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]], 2, 3))
# (1, 3)
# print(successor([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]], 1, 3))
# (1, 2)
# print(successor([[5, 4, 11, 2], [6, 10, 3, 12], [7, 8, 9, 1]], 2, 3))
# (None, None)
# print(last([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]]))
# (0, 3)
# print(last([[8, 14, 13, 12], [15, 1, 2, 11], [5, 3, 10, 16], [4, 6, 7, 9]]))
# (3, 2)
# print(last(((18, 19, 20, 4, 5), (17, 1, 3, 6, 8), (16, 13, 2, 9, 7), (14, 15, 12, 11, 10))))
# (0, 2)
# print(hidato([[5, 4, 11, 12], [6, 10, 3, 2], [7, 8, 9, 1]]))
# True
# print(hidato([[8, 14, 13, 12], [15, 1, 2, 11], [5, 3, 10, 16], [4, 6, 7, 9]]))
# False
# 8
# print(hidato(((18, 19, 20, 4, 5), (17, 1, 3, 6, 8), (16, 13, 2, 9, 7), (14, 15, 12, 11, 10))))
# True
----------------------------------------

# 첫째줄에 입력받을 값의 개수인 n을 입력받고, 두번쨰 줄에 n개의 값들을 구분하여 한줄에 입력받는다.
# 이 입력받은 값들 중에서, 문자열인 경우 None을, 숫자라면, 10진수 형태와 2진수형태로 보았을 때 모두 팰린드롬이라면 True를
# 10진수나 2진수형태중에서 팰린드롬이 아닌것이 있다면 False를 입력받은 값의 순서대로 한줄에 출력하라


# 예시
# 입력: 0, 1, 3, 9, 11, 22, 32, 313
# 출력: True, True, True, True, False, False, False, True (변경 필요함)
# 입력: 50, Hello, 101, World, 33
# 출력: False, None, False, None, True
def Two(num):
    b = ''
    while num !=0:
        value = num%2
        if value == 0:
            b = '0' + b
        else:
            b = '1' + b
        num = num//2
    return b
def palindrome(w):
        w_list = list(w)
        w_reverse = list(reversed(w_list))
        if w_list == w_reverse:
            return True

n = int(input())
v = input().split()
for i in v:
    if i == str:
        print(False)
    else:
        if palindrome(i) and palindrome(Two(i)):
            print(True)

-----------------------------------------------------

def Two(num):
    return bin(num)[2:]  # 0b 접두사를 제거하고 이진수 문자열 반환


def palindrome(w):
    return w == w[::-1]  # 문자열을 역순으로 비교


n = int(input())
v = input().replace(",", "").split()
result = []

for i in v:
    if not i.isdigit():  # 숫자가 아니면 None을 추가
        result.append(None)
    else:
        num = int(i)
        d = palindrome(str(num))  # 10진수 형태 팰린드롬 확인
        binary = palindrome(Two(num))  # 2진수 형태 팰린드롬 확인

        if d and binary:
            result.append(True)
        else:
            result.append(False)

print(result)
